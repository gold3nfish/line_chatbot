# Require dependencies
require 'sinatra'
require 'sinatra/activerecord'
require 'line/bot'
require 'figaro'
require 'openai'

# Require models
require_relative 'models/message'

# Require routes
require_relative 'login'

# Load environment variables
Figaro.application = Figaro::Application.new(environment: 'development', path: 'config/application.yml')
Figaro.load

# Configure database
configure :development do
  set :database, YAML.load_file('config/database.yml')['development']
end

configure :production do
  set :database, ENV['DATABASE_URL']
end

# Configure LINE bot
client = Line::Bot::Client.new do |config|
  config.channel_secret = ENV['LINE_CHANNEL_SECRET']
  config.channel_token = ENV['LINE_CHANNEL_ACCESS_TOKEN']
end


# Handle incoming messages
def process_message(text, user_id)
  if user_id == "u" + ENV['LINE_CHANNEL_SECRET']
    # The message was sent by the user
    sender = "human"
  else
    # The message was generated by OpenAI
    sender = "ai"
  end

  message = Message.new(text: text, user_id: user_id, sender: sender)
  message.save

  # Generate a response using OpenAI
  response = OpenAI::Completion.create(
    engine: "text-davinci-002",
    prompt: text,
    max_tokens: 50,
    n: 1,
    stop: nil,
    temperature: 1,
    top_p: 1
  )

  response_text = response.choices[0].text.strip

  # Save the response to the database
  response_message = Message.new(text: response_text, user_id: user_id, sender: "ai")
  response_message.save

  response_text
end

post '/callback' do
  body = request.body.read

  signature = request.env['HTTP_X_LINE_SIGNATURE']
  unless client.validate_signature(body, signature)
    error 400 do 'Bad Request' end
  end

  events = client.parse_events_from(body)
  events.each do |event|
    case event
    when Line::Bot::Event::Message
      case event.type
      when Line::Bot::Event::MessageType::Text
        # Process the incoming message and generate a response
        response_text = process_message(event.message['text'], event['source']['userId'])

        # Send the response to the user
        message = {
          type: 'text',
          text: response_text
        }
        client.reply_message(event['replyToken'], message)
      end
    end
  end

  # Return a success response
  'OK'
end
